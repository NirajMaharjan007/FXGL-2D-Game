/*
 * This source file was generated by the Gradle 'init' task
 */
package project.core;

import com.almasb.fxgl.app.*;
import com.almasb.fxgl.entity.Entity;
import com.almasb.fxgl.input.Input;
import com.almasb.fxgl.input.UserAction;
import com.almasb.fxgl.ui.UI;
import javafx.scene.input.KeyCode;
import javafx.scene.paint.Color;
import javafx.util.Duration;
import project.entities.*;
import project.misc.*;

import java.util.Locale;

import static com.almasb.fxgl.dsl.FXGL.*;
import static java.lang.System.*;

public class App extends GameApplication {
    protected static final int WIDTH = 800, HEIGHT = 640;
    private static final String VERSION = "1.0.2dev", TITLE = "Orc Master";
    protected MainUI controller;
    private Player player;
    private Enemy enemy;

    private int count = 0;

    public static void main(String[] args) {
        try {
            launch(args);
        } catch (Exception e) {
            err.println(e.getMessage());
            embeddedShutdown();
        }
    }

    /*
     *
     * Just for printing output the User Details
     *
     */
    @Override
    protected void onPreInit() {
        super.onPreInit();

        out.println("App.onPreInit()");
        out.println("JAVA Version: " + getProperty("java.version"));
        out.println("OS Name: " + getProperty("os.name").toUpperCase(Locale.ENGLISH));
        out.println("Game Version: " + VERSION);
    }

    @Override
    protected void initSettings(GameSettings settings) {
        settings.setApplicationMode(ApplicationMode.DEVELOPER);
        settings.setWidth(WIDTH);
        settings.setHeight(HEIGHT);
        settings.setTitle(TITLE);
        settings.setVersion(VERSION);
    }

    @Override
    protected void initUI() {
        super.initUI();

        controller = new MainUI();
        UI ui = getAssetLoader().loadUI("main.fxml", controller);

        controller.getLabel().textProperty().set("Player health:");
        controller.getCounter().textProperty().set(player.health + "");
        controller.getLabel1().textProperty().set("Enemy health:");
        controller.getCounter1().textProperty().set(enemy.health + "");

        getGameScene().addUI(ui);
    }

    @Override
    protected void initGame() {
        getGameWorld().addEntityFactory(new Factory());
        getGameScene().setBackgroundColor(Color.BLACK);

        setLevelFromMap("tmx/Level_1.tmx");

        player = getGameWorld().spawn("player", 128, 200).getComponent(Player.class);

        enemy = getGameWorld().spawn("enemy", 512, 200).getComponent(Enemy.class);
    }

    @Override
    protected void onUpdate(double tpf) {
        super.onUpdate(tpf);

        getGameTimer().runAtInterval(() -> {
            controller.getCounter().setText("" + player.health);
            controller.getCounter1().setText("" + enemy.health);

            // For player and enemy
            if (enemy.getAttack()) {
                enemy.getEntity().setZIndex(2);
                player.getEntity().setZIndex(0);
            }
            if (player.getAttack()) {
                player.getEntity().setZIndex(2);
                enemy.getEntity().setZIndex(0);
            } else if (enemy.getAttack() && player.getAttack()) {
                enemy.setHurt(false);
                player.setHurt(false);
            }
        }, Duration.seconds(0.0000024f));
        // out.println("App.onUpdate()" + player.health);

        CollisionDetection.follow(player, enemy, tpf);

        if (CollisionDetection.isTouch(player, enemy) && enemy.getAttack()) {
            if (!player.isHurt()) {
                player.setHurt(true);
                player.health -= 8;
            } else if (player.isDead()) {
                enemy.setAttack(false);
                player.setHurt(false);
            }
        } else {
            player.setHurt(false);
            enemy.setAttack(false);
        }

        if (enemy.health <= 0) {
            enemy.health = 0;
            enemy.setDead(true);
        }

        if (player.health <= 0) {
            player.health = 0;
            player.setDeath(true);
        }

    }

    @Override
    protected void initInput() {
        super.initInput();

        Input input = getInput();

        input.addAction(new UserAction("Up") {
            @Override
            protected void onActionBegin() {
                player.setAttack(false);
            }

            @Override
            protected void onAction() {
                player.up();
            }

            @Override
            protected void onActionEnd() {
                player.stop();
            }
        }, KeyCode.UP);

        input.addAction(new UserAction("Down") {
            @Override
            protected void onActionBegin() {
                player.setAttack(false);
            }

            @Override
            protected void onAction() {
                player.down();
            }

            @Override
            protected void onActionEnd() {
                player.stop();
                player.setAttack(false);

            }
        }, KeyCode.DOWN);

        input.addAction(new UserAction("Left") {
            @Override
            protected void onActionBegin() {
                player.setAttack(false);
            }

            @Override
            protected void onAction() {
                player.left();
            }

            @Override
            protected void onActionEnd() {
                player.stop();
                player.setAttack(false);

            }
        }, KeyCode.LEFT);

        input.addAction(new UserAction("Right") {
            @Override
            protected void onActionBegin() {
                player.setAttack(false);
            }

            @Override
            protected void onAction() {
                player.right();
            }

            @Override
            protected void onActionEnd() {
                player.stop();
                player.setAttack(false);
            }
        }, KeyCode.RIGHT);

        input.addAction(new UserAction("Attack") {
            @Override
            protected void onActionBegin() {
                player.setAttack(true);

                // out.println("Enemy Hurt " + enemy.isHurt() +
                // " Player Attack " + player.getAttack() +
                // " Status: " + CollisionDetection.isTouch(player, enemy));

                if (player.getAttack() && CollisionDetection.isTouch(player, enemy)) {
                    enemy.setHurt(true);
                    enemy.health -= 2;
                }

                else if (enemy.isHurt())
                    player.setAttack(false);
            }

            @Override
            protected void onActionEnd() {
                player.stop();
            }
        }, KeyCode.SPACE);

        input.addAction(new UserAction("Run") {
            @Override
            protected void onAction() {
                // out.println("App.onAction " + player.isRunning() + " " + count);
                player.setRun(count <= 64);
                count++;
            }

            @Override
            protected void onActionEnd() {
                player.setRun(false);
                if (count >= 64) {
                    count = 0;
                }
                // count = 0;
            }
        }, KeyCode.X);

        input.addAction(new UserAction("Debug Option") {
            @Override
            protected void onActionBegin() {
                out.println("App.onAction");
                out.println("--------------------------------------------------------");
                out.println("Player pos: " + player.getEntity().getPosition());
                out.println("Enemy pos: " + enemy.getEntity().getPosition());
                out.println("Player Actions " + player.getAction());
                out.println(player.getSpeed());
                out.println("--------------------------------------------------------");
            }

            @Override
            protected void onActionEnd() {
            }

        }, KeyCode.Z);
    }

    @Override
    protected void initPhysics() {
        super.initPhysics();
        getPhysicsWorld().setGravity(0, 0);

        Entity walls = entityBuilder()
                .type(EntityType.WALL)
                .collidable()
                .buildScreenBounds(256);
        getGameWorld().addEntity(walls);
    }

}